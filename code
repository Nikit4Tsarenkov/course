#include<iostream>	
#include<string>
#include<fstream>
#include<vector>
#include<cstdlib>
#include<Windows.h>
using namespace std;

class Animals
{

private:
	string weight;
	string height;
	string length;
	string type;
	string c1ass;
	string family;
	string species;

public:
	Animals()
	{ }
	Animals(string type0, string c1ass0, string family0, string species0, string weight0, string length0, string height0)
	{
		type = type0;
		c1ass = c1ass0;
		family = family0;
		species = species0;
		weight = weight0;
		length = length0;
		height = height0;
	}
	
	void Setweight(string x)
	{
		weight = x;
	}
	void Setheight(string x)
	{
		height = x;
	}
	void Setlength(string x)
	{
		length = x;
	}
	void Settype(string x)
	{
		type = x;
	}
	void Setc1ass(string x)
	{
		c1ass = x;
	}
	void Setfamily(string x)
	{
		family = x;
	}
	void Setspecies(string x)
	{
		species = x;
	}



	string Getweight()
	{
		return weight;
	}
	string Getheight()
	{
		return height;
	}
	string Getlength()
	{
		return length;
	}
	string Getspecies()
	{
		return species;
	}
	string Getfamily()
	{
		return family;
	}
	string Gettype()
	{
		return type;
	}
	string Getc1ass()
	{
		return c1ass;
	}
	
};
void menu()
{
	cout << "Input 1 to watch all the information of our ZOO!" << endl;
	cout << "Input 2 to add new animals" << endl;
	cout << "Input 3 to delete animals" << endl;
	cout << "Input q to quit" << endl;

}

void addinfo(string filename, vector<Animals>  &data) {
	ifstream fin(filename);
	string str;
	for (unsigned int i = 0; i < data.size(); i++) {
		for (int j = 0; j < 8; j++)
		{
			getline(fin, str, '/');
			switch (j)
			{
			case 0:data[i].Settype(str); break;
			case 1:data[i].Setc1ass(str); break;
			case 2:data[i].Setfamily(str); break;
			case 3:data[i].Setspecies(str); break;
			case 4:data[i].Setweight(str); break;
			case 5:data[i].Setheight(str); break;
			case 6:data[i].Setlength(str); break;
			case 7:break;
			}
		}
	}
	fin.close();
}

int aniumalCounter(string filename) {
	ifstream fin(filename);
	char *str = new char[1024];
	int count = 0;
	while (!fin.eof())
	{
		fin.getline(str, 1024, '/n');
		count++;
	}
	delete[] str;
	fin.close();
	return count;
}

void outputvector(vector<Animals> vect)
{
	for (unsigned i = 0; i < vect.size(); i++)
	{
		cout << "\ttype: " << vect[i].Gettype() << endl;
		cout << "\tclass: " << vect[i].Getc1ass() << endl;
		cout << "\tfamily: " << vect[i].Getfamily() << endl;
		cout << "\tspecies: " << vect[i].Getspecies() << endl;
		cout << "\tWeight: " << vect[i].Getweight() << endl;
		cout << "\tbody Height: " << vect[i].Getheight() << endl;
		cout << "\tbody lenght: " << vect[i].Getlength() << endl << endl;
		
	}
}
void input_all_info(string &type, string &c1ass, string &family, string &species, string &weight, string &length, string &height)
{
	cout << "Input type: "; cin >> type;
	cout << "Input class: "; cin >> c1ass;
	cout << "Input family: "; cin >> family;
	cout << "Input species: "; cin >> species;
	cout << "Input weight: "; cin >> weight;
	cout << "Input body height: "; cin >> height;
	cout << "Input body lenght: "; cin >> length;
}

void update_animal_data(vector<Animals>vect, string filename) {
	ofstream fout(filename, ios::out);
	for (unsigned int i = 0; i < vect.size(); i++) {
		fout << vect[i].Gettype() << " " << vect[i].Getc1ass() << " " << vect[i].Getfamily() << " " << vect[i].Getspecies()
			<< " " << vect[i].Getweight() << " " << vect[i].Getheight() << " " << vect[i].Getlength();
		if (i != vect.size() - 1)fout << endl;
	}
	fout.close();
}
bool check_info(string type, string c1ass, string family, string species, string weight, string length, string height, vector<Animals>vect) {
	for (unsigned int i = 0; i < vect.size(); i++) {
		if (type == vect[i].Gettype() && c1ass == vect[i].Getc1ass() && family == vect[i].Getfamily() && species == vect[i].Getspecies() && weight == vect[i].Getweight()
			&& height == vect[i].Getweight() && length == vect[i].Getlength())return true;
	}
	return false;
}
void add_data(vector<Animals>&vect, string filename) {
	int amount;
	string type, c1ass, family, species, weight, height, length;
	input_all_info(type, c1ass, family, species, weight, height, length);
	if (check_info(type, c1ass, family, species, weight, height, length, vect) == true)
	{
		cout << "information about this " << species << " already exist\n";
	}
	else
	{
		input_all_info(type, c1ass, family, species, weight, height, length);
		vect.push_back(Animals(type, c1ass, family, species, weight, height, length));
		update_animal_data(vect, filename);
	}
}

int Choose_an_animal(string type, string c1ass, string family, string species, string weight, string length, string height, vector<Animals>vect) {
	for (unsigned int i = 0; i < vect.size(); i++) {
		if (type == vect[i].Gettype() && c1ass == vect[i].Getc1ass() && family == vect[i].Getfamily() && species == vect[i].Getspecies() && weight == vect[i].Getweight()
			&& height == vect[i].Getweight() && length == vect[i].Getlength())return true;
	} return -1;
}

void del_data(vector<Animals>&vect, string filename) {
	string type, c1ass, family, species, weight, height, length;
	input_all_info(type, c1ass, family, species, weight, height, length);
	if(check_info(type, c1ass, family, species, weight, height, length, vect) == false) {
		cout << "There is no such " << species << "'s in our zoo\n";
	}
	else {
		int index = Choose_an_animal(type, c1ass, family, species, weight, height, length, vect);
		vect.erase(vect.begin() + index);
	     }
}

int main()

{
	setlocale(LC_ALL, "ru");
	int count = aniumalCounter("Animals.txt");
	vector <Animals> data(count);
	addinfo("Animals.txt", data);
	char choise;
	while (true)
	{
		menu();
		cin >> choise;
		system("cls");
		switch (choise)
		{
		case '1':outputvector(data); break;
		case '2':add_data(data, "Animals.txt"); break;
	        case '3':del_data(data, "Animals.txt"); break;
		case 'q': return 0;

		}
	}

}
